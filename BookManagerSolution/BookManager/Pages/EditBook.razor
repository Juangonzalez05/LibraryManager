@page "/edit-book/{id:int}"
@inject BookService BookService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="book-form-container">
    <div class="header">
        <h3>Editar Libro</h3>
        <button class="btn btn-outline" @onclick="@(() => Navigation.NavigateTo($"/books"))" title="Volver a la lista">
            <span class="btn-icon">←</span> Volver
        </button>
    </div>

    @if (book == null)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Cargando libro...</p>
        </div>
    }
    else if (message != null)
    {
        <div class="alert @(message.Contains("exitosamente") ? "alert-success" : "alert-danger")">
            @message
        </div>
    }
    else
    {
        <div class="form-container">
            <div class="form-group">
                <label>Título: <span class="required">*</span></label>
                <input class="form-control" @bind="book.Title" placeholder="Ingrese el título del libro" />
            </div>

            <div class="form-group">
                <label>Año:</label>
                <input type="number" class="form-control" @bind="book.Year" placeholder="Año de publicación" />
            </div>

            <div class="form-group">
                <label>Género:</label>
                <input class="form-control" @bind="book.Genre" placeholder="Género literario" />
            </div>

            <div class="form-group">
                <label>Páginas:</label>
                <input type="number" class="form-control" @bind="book.PageCount" placeholder="Número de páginas" />
            </div>

            <div class="form-group">
                <label>Autor:</label>
                <input class="form-control" value="@book.Author?.FullName" disabled />
            </div>

            <div class="form-actions">
                <button class="btn btn-warning" @onclick="UpdateBook">
                    <span class="btn-icon">✏️</span> Actualizar Libro
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int id { get; set; }
    private Book book;
    private string message;

    protected override async Task OnInitializedAsync()
    {
        book = await BookService.GetBookByIdAsync(id);
    }

    private async Task UpdateBook()
    {
        if (string.IsNullOrWhiteSpace(book.Title))
        {
            message = "El título es obligatorio.";
            return;
        }

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "¿Confirmar los cambios en este libro?" });

        if (confirmed)
        {
            bool success = await BookService.UpdateBookAsync(book);
            if (success)
            {
                message = "Libro actualizado exitosamente";
                await Task.Delay(1500); // Pequeña pausa para mostrar el mensaje
                Navigation.NavigateTo("/books");
            }
            else
            {
                message = "Error al actualizar el libro";
            }
        }
    }
}

<style>
    .book-form-container {
        padding: 20px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        padding-bottom: 15px;
        border-bottom: 1px solid #eee;
    }

        .header h3 {
            margin: 0;
            color: #2c3e50;
        }

    .form-container {
        max-width: 800px;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #495057;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
    }

        .form-control:focus {
            border-color: #3498db;
            outline: none;
            box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.25);
        }

        .form-control:disabled {
            background-color: #f8f9fa;
            cursor: not-allowed;
        }

    .required {
        color: #dc3545;
        margin-left: 2px;
    }

    .form-actions {
        margin-top: 30px;
        display: flex;
        justify-content: flex-end;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
    }

    .btn-warning {
        background-color: #ffc107;
        color: #212529;
    }

        .btn-warning:hover {
            background-color: #e0a800;
        }

    .btn-outline {
        background-color: transparent;
        border: 1px solid #3498db;
        color: #3498db;
    }

        .btn-outline:hover {
            background-color: #3498db;
            color: white;
        }

    .btn-icon {
        margin-right: 5px;
    }

    .alert {
        padding: 12px;
        border-radius: 4px;
        margin-bottom: 20px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px 0;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-left-color: #3498db;
        animation: spin 1s linear infinite;
        margin-bottom: 15px;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }
</style>