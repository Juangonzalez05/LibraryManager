@page "/book/{id:int}"
@inject BookService BookService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="book-details-container">
    <div class="header">
        <h3>Detalles del Libro</h3>
        <div class="header-actions">
            <button class="btn btn-outline" @onclick="@(() => Navigation.NavigateTo($"/books"))" title="Volver a la lista">
                <span class="btn-icon">←</span> Volver
            </button>
        </div>
    </div>

    @if (book == null)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Cargando libro...</p>
        </div>
    }
    else
    {
        <div class="book-card">
            <div class="book-info">
                <div class="book-header">
                    <h2>@book.Title</h2>
                    @if (!string.IsNullOrEmpty(book.Genre))
                    {
                        <span class="book-genre">@book.Genre</span>
                    }
                </div>

                <div class="info-grid">
                    <div class="info-item">
                        <div class="info-label">Autor</div>
                        <div class="info-value">@(book.Author?.FullName ?? "---")</div>
                    </div>

                    <div class="info-item">
                        <div class="info-label">Año de publicación</div>
                        <div class="info-value">@(book.Year > 0 ? book.Year.ToString() : "---")</div>
                    </div>

                    <div class="info-item">
                        <div class="info-label">Número de páginas</div>
                        <div class="info-value">@(book.PageCount > 0 ? book.PageCount.ToString() : "---")</div>
                    </div>
                </div>
            </div>

            <div class="book-actions">
                <button class="btn btn-warning" @onclick="NavigateToEdit">
                    <span class="btn-icon">✏️</span> Editar
                </button>
                <button class="btn btn-danger" @onclick="DeleteBook">
                    <span class="btn-icon">🗑️</span> Eliminar
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int id { get; set; }
    private Book book;

    protected override async Task OnInitializedAsync()
    {
        book = await BookService.GetBookByIdAsync(id);
    }

    private async Task DeleteBook()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "¿Estás seguro de que deseas eliminar este libro?" });

        if (confirmed)
        {
            bool success = await BookService.DeleteBookAsync(id);
            if (success)
            {
                Navigation.NavigateTo("/books");
            }
        }
    }

    private void NavigateToEdit()
    {
        Navigation.NavigateTo($"/edit-book/{id}");
    }
}

<style>
    .book-details-container {
        padding: 20px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        padding-bottom: 15px;
        border-bottom: 1px solid #eee;
    }

        .header h3 {
            margin: 0;
            color: #2c3e50;
        }

    .header-actions {
        display: flex;
        gap: 10px;
    }

    .book-card {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 25px;
        margin-bottom: 20px;
    }

    .book-header {
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

        .book-header h2 {
            margin: 0;
            color: #2c3e50;
            font-size: 24px;
        }

    .book-genre {
        background-color: #e1f5fe;
        color: #0288d1;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 500;
    }

    .info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .info-item {
        margin-bottom: 15px;
    }

    .info-label {
        font-size: 14px;
        color: #6c757d;
        margin-bottom: 5px;
    }

    .info-value {
        font-size: 16px;
        font-weight: 500;
        color: #212529;
    }

    .book-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px solid #eee;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
    }

    .btn-warning {
        background-color: #ffc107;
        color: #212529;
    }

        .btn-warning:hover {
            background-color: #e0a800;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .btn-outline {
        background-color: transparent;
        border: 1px solid #3498db;
        color: #3498db;
    }

        .btn-outline:hover {
            background-color: #3498db;
            color: white;
        }

    .btn-icon {
        margin-right: 5px;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px 0;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-left-color: #3498db;
        animation: spin 1s linear infinite;
        margin-bottom: 15px;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }
</style>